// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: public_member_api_docs, prefer_single_quotes, avoid_escaping_inner_quotes, prefer_const_constructors, sort_constructors_first, always_specify_types

import 'dart:async';

import 'package:flutter/widgets.dart';

/// A class generated by flappy_translator package containing localized strings
class AppLocalizations {
  static String get appTitle => _getText('appTitle');

  static String get generalOk => _getText('generalOk');

  static String get generalOpen => _getText('generalOpen');

  static String get homeScreenNoKifu => _getText('homeScreenNoKifu');

  static String get menuBarOpenFile => _getText('menuBarOpenFile');

  static String get menuBarClipboard => _getText('menuBarClipboard');

  static String get homeScreenOpenFileButtonTooltip =>
      _getText('homeScreenOpenFileButtonTooltip');

  static String get homeScreenClipboardButtonTooltip =>
      _getText('homeScreenClipboardButtonTooltip');

  static String get homeScreenInfoButtonTooltip =>
      _getText('homeScreenInfoButtonTooltip');

  static String get invalidContentPopupTitle =>
      _getText('invalidContentPopupTitle');

  static String get invalidContentPopupDescription =>
      _getText('invalidContentPopupDescription');

  static String get gameAlreadyOpenPopupTitle =>
      _getText('gameAlreadyOpenPopupTitle');

  static String get gameAlreadyOpenPopupDescription =>
      _getText('gameAlreadyOpenPopupDescription');

  static late Map<String, String> _localizedValues;

  static const _enValues = {
    'appTitle': 'Kifu Viewer',
    'generalOk': 'Ok',
    'generalOpen': 'Open',
    'homeScreenNoKifu':
        'Please select a kifu by opening a file or pasting from clipboard.',
    'menuBarOpenFile': 'Open...',
    'menuBarClipboard': 'Paste from Clipboard',
    'homeScreenOpenFileButtonTooltip': 'Open Kifu File',
    'homeScreenClipboardButtonTooltip': 'Paste from Clipboard',
    'homeScreenInfoButtonTooltip': 'Show Licenses',
    'invalidContentPopupTitle': 'Error!',
    'invalidContentPopupDescription':
        'No moves found. Are you sure the content is valid?',
    'gameAlreadyOpenPopupTitle': 'Error!',
    'gameAlreadyOpenPopupDescription':
        'Game already open. Please choose another game.',
  };

  static const _allValues = {
    'en': _enValues,
  };

  AppLocalizations(Locale locale) {
    _locale = locale;
    _localizedValues = {};
  }

  static late Locale _locale;

  static String _getText(String key) =>
      _localizedValues[key] ?? '** $key not found';

  static Locale get currentLocale => _locale;

  static String get currentLanguage => _locale.languageCode;

  static Future<AppLocalizations> load(Locale locale) async {
    final translations = AppLocalizations(locale);
    _localizedValues = _allValues[locale.toString()]!;
    return translations;
  }
}

class AppLocalizationsDelegate extends LocalizationsDelegate<AppLocalizations> {
  const AppLocalizationsDelegate();

  static final Set<Locale> supportedLocals = {
    Locale('en'),
  };

  @override
  bool isSupported(Locale locale) => supportedLocals.contains(locale);

  @override
  Future<AppLocalizations> load(Locale locale) => AppLocalizations.load(locale);

  @override
  bool shouldReload(AppLocalizationsDelegate old) => false;
}
